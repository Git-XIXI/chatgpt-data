# 命令执行 docker-compose up -d
# docker-compose -f environment-docker-compose.yml up -d
version: '3.9' # 指定Docker Compose的版本为3.9
services: # 定义服务集合

  # Nginx服务配置
  nginx:
    image: nginx:1.25.3 # 使用nginx:1.25.3镜像启动Nginx服务
    container_name: nginx # 设置容器名称为nginx
    restart: always # 确保容器在退出后始终重新启动
    ports: # 映射宿主机与容器端口
      - '443:443' # 将宿主机443端口映射到容器443端口
      - '80:80' # 将宿主机80端口映射到容器80端口
    volumes: # 挂载本地目录到容器内指定路径
      - ./nginx/logs:/var/log/nginx # 将本地nginx/logs目录挂载到容器/var/log/nginx路径下
#       - ./nginx/html:/usr/share/nginx/html # 将本地nginx/html目录挂载到容器/usr/share/nginx/html路径下
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf # 将本地nginx/conf/nginx.conf配置文件挂载到容器/etc/nginx/nginx.conf路径下
      - ./nginx/conf/conf.d:/etc/nginx/conf.d # 将本地nginx/conf/conf.d目录挂载到容器/etc/nginx/conf.d路径下
#       - ./nginx/ssl:/etc/nginx/ssl/ # 将本地nginx/ssl目录挂载到容器/etc/nginx/ssl路径下
    privileged: true # 给予容器更多权限以执行特殊操作（如绑定较低端口）

  # MySQL服务配置
  mysql:
    image: mysql:8.0.32 # 使用mysql:8.0.32镜像启动MySQL服务
    container_name: mysql # 设置容器名称为mysql
    command: --default-authentication-plugin=mysql_native_password # 设置默认认证插件为mysql_native_password
    restart: always # 确保容器在退出后始终重新启动
    environment: # 设置环境变量
      TZ: Asia/Shanghai # 设置容器时区为上海时间
      MYSQL_ROOT_PASSWORD: 506009 # 设置MySQL root用户的密码
    networks: # 添加服务到自定义网络
      - my-network
    depends_on: # 设置依赖服务
      - mysql-job-dbdata
    ports: # 映射宿主机与容器端口
      - "13306:3306" # 将宿主机13306端口映射到容器3306端口
    volumes: # 挂载本地目录到容器内指定路径
      - ./sql:/docker-entrypoint-initdb.d # 在初始化数据库时执行此目录下的SQL脚本
    healthcheck: # 设置健康检查
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ] # 使用mysqladmin命令对本地MySQL进行ping检测
      interval: 5s # 检查间隔为5秒
      timeout: 10s # 超时时间为10秒
      retries: 10 # 允许尝试检查次数为10次
      start_period: 15s # 延迟启动健康检查的时间为15秒
    volumes_from: # 从其他容器共享卷
      - mysql-job-dbdata

  # MySQL数据卷服务配置，用于数据持久化
  mysql-job-dbdata:
    image: alpine:3.18.2 # 使用alpine:3.18.2镜像创建数据卷容器
    container_name: mysql-job-dbdata # 设置容器名称为mysql-job-dbdata
    volumes: # 创建数据卷并挂载至容器内部
      - /var/lib/mysql # 将容器内的/var/lib/mysql作为MySQL的数据存储目录

  # PhpMyAdmin配置，用于管理MySQL数据库。
  phpmyadmin:
    image: phpmyadmin:5.2.1
    container_name: phpmyadmin
    hostname: phpmyadmin
    ports:
      - 8899:8899
    environment:
      - PMA_HOST=mysql
      - PMA_PORT=3306
      - MYSQL_ROOT_PASSWORD=123qwe!@#QWE
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - my-network

#   # Redis Commander配置，提供Redis数据管理界面。
#   redis-admin:
#       image: spryker/redis-commander:0.8.0
#       container_name: redis-admin
#       hostname: redis-commander
#       restart: always
#       ports:
#         - 8081:8081
#       environment:
#         - REDIS_HOSTS=local:redis:6379
#         - HTTP_USER=admin
#         - HTTP_PASSWORD=admin
#       networks:
#         - my-network
#       depends_on:
#         redis:
#           condition: service_healthy
#
#   # Redis配置，提供键值存储服务。
#   redis:
#       image: redis:7.2.0
#       container_name: redis
#       restart: always
#       hostname: redis
#       privileged: true
#       ports:
#         - 16379:6379
#       volumes:
#         - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
#       command: redis-server /usr/local/etc/redis/redis.conf
#       networks:
#         - my-network
#       healthcheck:
#         test: [ "CMD", "redis-cli", "ping" ]
#         interval: 10s
#         timeout: 5s
#         retries: 3

  # ChatGPT数据应用配置，提供API服务。
  chatgpt-data-app:
    image: registry.cn-guangzhou.aliyuncs.com/cjcxixi/chatgpt-data:1.3
    container_name: chatgpt-data
    ports:
      - "8083:8083"
    environment:
      - TZ=PRC
      - SERVER_PORT=8083
#       - APP_CONFIG_API_VERSION=v1
      - APP_CONFIG_CROSS_ORIGIN='http://8.134.199.58:3002/'
      - APP_CONFIG_LIMIT_COUNT=10
      - APP_CONFIG_WHITE_LIST=oEaoa6kLreTUaI7vGSDoLGu8H9qw
#       - WXPAY_CONFIG_ENABLED=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=506009
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/openai?useUnicode=true&characterEncoding=utf8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC&useSSL=true
#       - CHATGLM_SDK_CONFIG_ENABLED=true
#       - CHATGLM_SDK_CONFIG_API_HOST=https://open.bigmodel.cn/
#       - CHATGLM_SDK_CONFIG_API_KEY=sk-qaWHZdoWHtPNajzy1cAe522e7cFc4b4fB4Ce68Ab203441C4
    volumes:
      - ./log:/var/log/chatgpt-data
    networks:
      - my-network
    depends_on:
#         redis:
#           condition: service_healthy
      mysql:
       condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: always

  # ChatGPT Web应用配置，提供前端界面。
  chatgpt-web-app:
    image: registry.cn-guangzhou.aliyuncs.com/cjcxixi/chatgpt-web:1.3
    container_name: chatgpt-web
    ports:
      - "3002:3002"
    networks:
      - my-network
    restart: always

  # 定义网络配置，容器间通过此网络进行通信。
networks:
   my-network:
     driver: bridge